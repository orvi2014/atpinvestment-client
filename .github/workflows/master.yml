name: Deploy Web App to Production

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main

      # 2. Debug directory structure
      - name: Debug Directory Structure
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing all directories:"
          ls -la
          echo "Git status:"
          git status
          echo "Git branch:"
          git branch
          echo "Git remote:"
          git remote -v
          echo "Finding package.json:"
          find . -name "package.json"

      # 3. Cache npm dependencies.
      - name: Cache npm Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # 4. Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 5. Install dependencies
      - name: Install Dependencies
        run: |
          PACKAGE_JSON=$(find . -name "package.json" -not -path "*/node_modules/*" -not -path "*/dist/*" | head -n 1)
          if [ -z "$PACKAGE_JSON" ]; then
            echo "Error: package.json not found"
            exit 1
          fi
          PROJECT_DIR=$(dirname "$PACKAGE_JSON")
          echo "Found package.json in: $PROJECT_DIR"
          cd "$PROJECT_DIR"
          npm ci

      # 6. Clean and Build Production Server
      - name: Clean and Build Production Server
        run: |
          PACKAGE_JSON=$(find . -name "package.json" -not -path "*/node_modules/*" -not -path "*/dist/*" | head -n 1)
          PROJECT_DIR=$(dirname "$PACKAGE_JSON")
          cd "$PROJECT_DIR"
          export NODE_OPTIONS="--max-old-space-size=4096"
          rm -rf dist
          npm run build

      # 7. Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 8. Deploy Static Assets to S3
      - name: Deploy Static Assets to S3
        run: |
          PACKAGE_JSON=$(find . -name "package.json" -not -path "*/node_modules/*" -not -path "*/dist/*" | head -n 1)
          PROJECT_DIR=$(dirname "$PACKAGE_JSON")
          aws s3 sync "$PROJECT_DIR/dist/" s3://atpinvestment.com.bd/ \
            --exclude "index.html" \
            --cache-control "max-age=31536000, public" \
            --delete

      # 9. Deploy Index.html with No Cache
      - name: Deploy index.html to S3
        run: |
          PACKAGE_JSON=$(find . -name "package.json" -not -path "*/node_modules/*" -not -path "*/dist/*" | head -n 1)
          PROJECT_DIR=$(dirname "$PACKAGE_JSON")
          aws s3 cp "$PROJECT_DIR/dist/index.html" s3://atpinvestment.com.bd/index.html \
            --cache-control "max-age=0, no-cache, no-store, must-revalidate"

      # 10. Invalidate CloudFront Cache
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.DISTRIBUTION_PROD_ID }} \
            --paths "/*"

